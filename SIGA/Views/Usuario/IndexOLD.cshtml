@model Modules.Models.PayChangeViewModel
@*\Views\PayChange\PayChangeEditPartialView.cshtml*@

@{HtmlHelper.ClientValidationEnabled = false; HtmlHelper.UnobtrusiveJavaScriptEnabled = true;}

<!--TODO: Implemenent ajax call -->
@using (Ajax.BeginForm("Edit", "PayChange", new { id = Model.ModulePayChange.ModuleItemId }, new AjaxOptions { UpdateTargetId = "module-pane" }, new { @id = "PayChangeForm" }))
{

    //@using (Html.BeginForm("Edit", "PayChange", new{id = Model.ModulePayChange.ModuleItemId},FormMethod.Post, new { @id="PayChangeForm"}))
    //{
    @Html.HiddenFor(m => m.RequestGuid);
    @Html.HiddenFor(m => m.ModuleGuid);
    @Html.HiddenFor(m => m.ModuleItemGuid);
    @Html.HiddenFor(m => m.ModulePayChange.EffectiveDate);
    @Html.Hidden("ClockId");


    <div class="row-group">
        @*<div id="payChangeSaved" style="display:none;">
                <div class="alert alert-success text-center" role="alert">
                    <strong>Your module was saved successfully!</strong>
                </div>
            </div>*@
        @if (Model.ModulePayChangeResultSet.PayHistoryResults.Count == 0)
        {
            <div class="alert alert-warning text-center" role="alert">
                <strong>There is no previous pay history.  Default values are not set.</strong>
            </div>
        }

        <div class="row row-label">
            <div class="col-xs-10 col-md-8 col-lg-6 form-label">Increase Reason<i class="requerid-files">&nbsp;*</i></div>
        </div>
        <div class="row">
            <div class="col-xs-10 col-md-8 col-lg-6 no-right-pad">
                <div class="input-group" id="increasereason">
                    <div class="row">
                        <div class="col-xs-9 no-right-pad no-left-pad">@Html.DropDownListFor(m => m.ModulePayChange.Reason, Model.Reason, new { @class = "form-control ignore module-input" })</div>
                    </div>
                    <div class="row">
                        <div id="reasonValidationText" class="col-xs-9 no-right-pad no-left-pad validation-text "></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row-group">
        <div class="row row-label">
            <div class="col-xs-10 col-md-8 col-lg-6 form-label">Effective Date<i class="requerid-files">&nbsp;*</i></div>
        </div>
        <div class="row">
            <div class="col-xs-10 col-md-8 col-lg-6 no-right-pad">
                <div class="input-group" id="effecttivedate">
                    <div class="row">
                        <div class="col-xs-9 no-right-pad no-left-pad">@Html.TextBoxFor(m => m.ModulePayChange.EffectiveDateForDisplay, new { @class = "form-control  module-input", @id = "effectiveDateForDisplay" })</div>
                        <div class="col-xs-1 no-left-pad text-left ">
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                        </div>
                        <div class="col-xs-1">
                            <a class="info-icon show-nextpay" data-toggle="popover"
                               onclick="return false;" data-container=".nextpay-block" title="Pay Cycle" href="#">
                                <i class="fa fa-info-circle fa-2x"></i>
                            </a>
                        </div>
                    </div>
                    <div class="row">
                        <div id="effectiveDateValidationText" class="validation-text"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row-group">
        <div class="row row-label">
            <div class="col-xs-5 col-md-4 col-lg-3 form-label">Pay Type</div>
            <div class="col-xs-5 col-md-4 col-lg-3 form-label">Pay Cycle</div>
        </div>
        <div class="row">
            <div class="col-xs-5 col-md-4 col-lg-3 no-right-pad">
                <div class="input-group">
                    @Html.TextBoxFor(m => m.ModulePayChangeResultSet.CurrentPayInfoResults.CurrentPayType, new { @disabled = "disabled", @class = "form-control module-input" })
                </div>
            </div>
            <div class="col-xs-5 col-md-4 col-lg-3 no-right-pad">
                <div class="input-group">
                    @Html.TextBoxFor(m => m.ModulePayChangeResultSet.CurrentPayInfoResults.CurrentPayCycle, new { @disabled = "disabled", @class = "form-control module-input" })
                </div>
            </div>
        </div>
    </div>

    <div class="row-group">
        <div class="row row-label">
            <div class="col-xs-5 col-md-4 col-lg-3 form-label">New Pay Rate<i class="requerid-files">&nbsp;*</i></div>
            <div class="col-xs-5 col-md-4 col-lg-3 form-label">Pay Rate Pct.<i class="requerid-files">&nbsp;*</i></div>
        </div>
        <div class="row">
            <div class="col-xs-5 col-md-4 col-lg-3 no-right-pad">
                <div class="input-group">
                    <span class="input-group-addon">$</span>
                    @Html.TextBoxFor(m => m.ModulePayChange.NewCompRate, new { @class = "form-control module-input", @name = "newpayrate-val", @id = "newPayRate" })
                </div>
            </div>
            <div class="col-xs-5 col-md-4 col-lg-3 no-right-pad">
                <div class="input-group">
                    @*<input id="payRatePercent" class="form-control spinner-decimal" name="spinner-decimal-one" value="0.0">*@
                    @Html.TextBoxFor(m => m.ModulePayChange.NewCompPercent, new { @class = "form-control spinner-decimal spinner-decimal-one  module-input", @id = "payRatePercent" })
                    <span class="input-group-addon">%</span>
                </div>
            </div>
            <div class="col-xs-1 no-right-pad">
                <a class="info-icon show-payhistory" data-placement="auto" data-toggle="popover"
                   onclick="return false;" data-container=".history-block" title="Pay Rate History" href="#">
                    <i class="fa fa-info-circle fa-2x"></i>
                </a>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-5 col-md-4 col-lg-3 no-right-pad">
                <div id="newCompRateValidationText" class="validation-text "></div>
            </div>
            <div class="col-xs-5 col-md-4 col-lg-3 no-right-pad">
                <div id="newCompPercentValidationText" class="validation-text "></div>
            </div>
        </div>

    </div>

    <div class="row-group">
        <div class="row row-label">
            <div class="col-xs-5 col-md-4 col-lg-3 form-label">New Bonus Pct.<i class="requerid-files">&nbsp;*</i></div>
            <div class="col-xs-5 col-md-4 col-lg-3 form-label">Bonus Type<i class="requerid-files">&nbsp;*</i></div>
        </div>
        <div class="row">
            <div class="col-xs-5 col-md-4 col-lg-3 no-right-pad">
                <div class="input-group">
                    @Html.TextBoxFor(m => m.ModulePayChange.BonusPercent, new { @class = "form-control spinner-decimal spinner-decimal-two  module-input", @id = "bonusPercent" })
                    <span class="input-group-addon">%</span>
                </div>
            </div>
            <div class="col-xs-5 col-md-4 col-lg-3 no-right-pad">
                @Html.DropDownListFor(m => m.ModulePayChange.BonusType, Model.BonusType, new { @class = "form-control module-input", @id = "bonustype", @disabled = "disabled" })
            </div>
            <div class="col-xs-2 col-md-1"></div>
        </div>
        <div class="row">
            <div class="col-xs-5 col-md-4 col-lg-3 no-right-pad">
                <div id="bonusPercentValidationText" class="validation-text "></div>
            </div>
            <div class="col-xs-5 col-md-4 col-lg-3 no-right-pad">
                <div id="bonusTypeValidationText" class="validation-text "></div>
            </div>
            <div class="col-xs-2 col-md-1"></div>
        </div>
    </div>

    <div class="row row-label">
        @*<div class="col-xs-12"> <a href="#" id="save-form" class="btn btn-green btn-uppercase">Save</a>  @*class="button-next" </div>*@
        @*"cancel" class below will force jqueyvalidation to not fire on the form*@
        <div class=" col-xs-12">
            <span class="btn btn-green btn-uppercase cancel" onclick="moduleSubmit()">Save</span>
            <span class="btn btn-grey btn-uppercase cancel" onclick="modulePaneLoad('', '@Model.ModuleItemGuid')">Cancel</span>
        </div>
    </div>


}

<script type="text/javascript">
    var payRate = @(Model.ModulePayChangeResultSet.CurrentPayInfoResults.CurrentPayRate == -1 ? (decimal)0 : Model.ModulePayChangeResultSet.CurrentPayInfoResults.CurrentPayRate);

    var noPayValue = payRate > 0? false: true;

    var moduleSubmit = function() {
        if (!checkPayChangeFormValidation()){
            crVM.setModuleItemIsValid('@Model.ModuleItemGuid', false);
            crVM.requestFormValidation();
            return false;
        }
        else{
            $('#PayChangeForm').submit();
            crVM.setModuleItemIsValid('@Model.ModuleItemGuid', true);
            crVM.setModuleItemIsCompleted('@Model.ModuleItemGuid');
            crVM.requestFormValidation();
            return true;
        }
    }

    var $moduleInputs = $('.module-input');

    $moduleInputs.each(function () {
        var $moduleInput = $(this);
        $moduleInput.change( function() {
            crVM.setModuleItemIsDirty('@Model.ModuleItemGuid')
        });
    });


    var minDateParts = '@(String.Format("{0:MM/dd/yyyy}", Model.ModulePayChangeResultSet.CurrentPayInfoResults.EarliestAllowedDate))'.split('/');
    var minDate = new Date(minDateParts[2],minDateParts[0]-1,minDateParts[1]);

    $(document).ready(function () {

        $('#ClockId').val(crVM.selectedPersonClock());  // TODO:  Move to Registry?

        if (noPayValue){
            $('#payRatePercent').prop("disabled", true);
        }
        else{

            $("#newPayRate").keyup(function () {
                var perceresult = ($('#newPayRate').val() - payRate) / payRate * 100;
                $('#payRatePercent').val(perceresult.toFixed(2));
            });
            $("#payRatePercent.spinner-decimal").spinner({
                step: 1,
                numberFormat: "n",
                spin: function (event, ui) {
                    var newPayRate =   (ui.value / 100 * payRate) + payRate;
                    $("#newPayRate").val(newPayRate.toFixed(2));
                    crVM.setModuleItemIsDirty('@Model.ModuleItemGuid')
                }
            });

        }


        $("#payRatePercent").keyup(function () {
            var newPayRate =  ($('#payRatePercent').val() * payRate / 100) + payRate;
            $('#newPayRate').val(newPayRate.toFixed(2));
        });



        $("#bonusPercent.spinner-decimal").spinner({
            step: 1,
            numberFormat: "n",
            spin: function (event, ui) {
                $("#bonustype").prop('disabled', false);
                crVM.setModuleItemIsDirty('@Model.ModuleItemGuid')}

        });




        $('#effecttivedate').datetimepicker({
            //  defaultDate: $('#ModulePayChange_EffectiveDate').val(),
            ///format: 'ddd, MMM Do, YYYY'
            format:'L',
            minDate: minDate

        }).on("dp.change", function (e) {
            // $(".plum-creation-wrap #next-btn").attr({ style: "pointer-events: initial; background:#0aa66e; color:white;" });
            //var currentDate = $('#effecttivedate').data('viewDate');
            //$('#effecttivedate').val(moment(currentDate,'ddd, MMM Do, YYYY'))
            //$('#ModulePayChange_EffectiveDate').val(currentDate);


        });

        $('#bonusPercent').change(function(){
            if ( $('#bonusPercent').val() > 0) $('#bonustype').prop("disabled", false);
        });

        // $('#effecttivedate').datetimepicker();


        $('.show-nextpay').tooltip();
        $('.show-payhistory').tooltip();







        $('#PayChangeForm').validate();



        $('#PayChangeForm').attr('action', '@Modules.Helpers.Utils.GetBaseUrl()/paychange/edit/@Model.ModulePayChange.ModuleItemId')


        crVM.moduleValidationCalls.push('checkPayChangeFormValidation');  // register validation with creation viewmodel

        var $seePayHistory = $('.show-payhistory');
        $seePayHistory.each(function () {
            var $seePayHistory = $(this);

            $seePayHistory.popover({
                html: true,
                placement: 'left',
                content: function () {
                    return $("#popover-history").html();
                }
            });

            $seePayHistory.on('shown.bs.popover', function () {
                var popover = $seePayHistory.data('bs.popover');
                if (typeof popover !== "undefined") {
                    var $tip = popover.tip();
                    zindex = $tip.css('z-index');

                    $tip.find('.close').bind('click', function () {
                        popover.hide();
                        forcePopoverHide();
                        // $('.popover.fade.top').css("display", "none", "important");
                    });
                }
            });
        });

    });

    var checkPayChangeFormValidation = function(){

        var valid = true;
        if ($('#ModulePayChange_Reason').val() == '--Select--'){
            $('#reasonValidationText').show().text('Increase Reason is required');
            valid=false;}
        else{
            $('#reasonValidationText').hide().text('');
        }
        if (isNaN(Date.parse($('#effectiveDateForDisplay').val()))){
            $('#effectiveDateValidationText').show().text('Effective Date is required');
            valid=false;
        }
        else
        {
            var effectiveDate = new Date($('#effectiveDateForDisplay').val());
            if (effectiveDate < minDate){
                $('#effectiveDateValidationText').show().text('Effective Date must be greater than or equal to @Model.ModulePayChangeResultSet.CurrentPayInfoResults.EarliestAllowedDate');
                valid=false;}
            else {
                $('effectiveDateValidationText').hide().text('');
            }
        }


        if ($('#newPayRate').val() == '0'  && ($('#bonusPercent').val() == '0' && $('#bonustype').val() == 'None')){
            $('#newCompRateValidationText').show().text('New Pay Rate or New Bonus Pct. is required ');
            valid=false;
        }
        else {
            $('#newCompRateValidationText').hide().text('');
        }
        return valid;
    }

    var $seeEffectDate = $('.show-nextpay');
    $seeEffectDate.each(function () {
        var $seeEffectDate = $(this);

        $seeEffectDate.popover({
            html: true,
            placement: 'left',
            content: function () {
                return $("#popover-nextpay").html();
            }
        });

        $seeEffectDate.on('shown.bs.popover', function () {
            var popover = $seeEffectDate.data('bs.popover');
            if (typeof popover !== "undefined") {
                var $tip = popover.tip();
                zindex = $tip.css('z-index');

                $tip.find('.close').bind('click', function () {
                    popover.hide();
                    forcePopoverHide();
                    // $('.popover.fade.top').css("display", "none", "important");
                });
            }
        });
    });

    //function ($) {
    //    $.validator.unobtrusive.addValidation = function (selector) {
    //        //get the relevant form
    //        var form = $(selector);
    //        // delete validator in case someone called form.validate()
    //        $(form).removeData("validator");
    //        $.validator.unobtrusive.parse(form);
    //    }
    //});

</script>
